/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.carles.kafkastream;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class NullableUserPageViewsProduct extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5896897115531534267L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NullableUserPageViewsProduct\",\"namespace\":\"io.carles.kafkastream\",\"fields\":[{\"name\":\"userid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"pageviews\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<NullableUserPageViewsProduct> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<NullableUserPageViewsProduct> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<NullableUserPageViewsProduct> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<NullableUserPageViewsProduct> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<NullableUserPageViewsProduct> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this NullableUserPageViewsProduct to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a NullableUserPageViewsProduct from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a NullableUserPageViewsProduct instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static NullableUserPageViewsProduct fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String userid;
  private java.util.Map<java.lang.String,java.lang.String> pageviews;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NullableUserPageViewsProduct() {}

  /**
   * All-args constructor.
   * @param userid The new value for userid
   * @param pageviews The new value for pageviews
   */
  public NullableUserPageViewsProduct(java.lang.String userid, java.util.Map<java.lang.String,java.lang.String> pageviews) {
    this.userid = userid;
    this.pageviews = pageviews;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userid;
    case 1: return pageviews;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userid = value$ != null ? value$.toString() : null; break;
    case 1: pageviews = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'userid' field.
   * @return The value of the 'userid' field.
   */
  public java.lang.String getUserid() {
    return userid;
  }


  /**
   * Sets the value of the 'userid' field.
   * @param value the value to set.
   */
  public void setUserid(java.lang.String value) {
    this.userid = value;
  }

  /**
   * Gets the value of the 'pageviews' field.
   * @return The value of the 'pageviews' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getPageviews() {
    return pageviews;
  }


  /**
   * Sets the value of the 'pageviews' field.
   * @param value the value to set.
   */
  public void setPageviews(java.util.Map<java.lang.String,java.lang.String> value) {
    this.pageviews = value;
  }

  /**
   * Creates a new NullableUserPageViewsProduct RecordBuilder.
   * @return A new NullableUserPageViewsProduct RecordBuilder
   */
  public static io.carles.kafkastream.NullableUserPageViewsProduct.Builder newBuilder() {
    return new io.carles.kafkastream.NullableUserPageViewsProduct.Builder();
  }

  /**
   * Creates a new NullableUserPageViewsProduct RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NullableUserPageViewsProduct RecordBuilder
   */
  public static io.carles.kafkastream.NullableUserPageViewsProduct.Builder newBuilder(io.carles.kafkastream.NullableUserPageViewsProduct.Builder other) {
    if (other == null) {
      return new io.carles.kafkastream.NullableUserPageViewsProduct.Builder();
    } else {
      return new io.carles.kafkastream.NullableUserPageViewsProduct.Builder(other);
    }
  }

  /**
   * Creates a new NullableUserPageViewsProduct RecordBuilder by copying an existing NullableUserPageViewsProduct instance.
   * @param other The existing instance to copy.
   * @return A new NullableUserPageViewsProduct RecordBuilder
   */
  public static io.carles.kafkastream.NullableUserPageViewsProduct.Builder newBuilder(io.carles.kafkastream.NullableUserPageViewsProduct other) {
    if (other == null) {
      return new io.carles.kafkastream.NullableUserPageViewsProduct.Builder();
    } else {
      return new io.carles.kafkastream.NullableUserPageViewsProduct.Builder(other);
    }
  }

  /**
   * RecordBuilder for NullableUserPageViewsProduct instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NullableUserPageViewsProduct>
    implements org.apache.avro.data.RecordBuilder<NullableUserPageViewsProduct> {

    private java.lang.String userid;
    private java.util.Map<java.lang.String,java.lang.String> pageviews;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.carles.kafkastream.NullableUserPageViewsProduct.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userid)) {
        this.userid = data().deepCopy(fields()[0].schema(), other.userid);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.pageviews)) {
        this.pageviews = data().deepCopy(fields()[1].schema(), other.pageviews);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing NullableUserPageViewsProduct instance
     * @param other The existing instance to copy.
     */
    private Builder(io.carles.kafkastream.NullableUserPageViewsProduct other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.userid)) {
        this.userid = data().deepCopy(fields()[0].schema(), other.userid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pageviews)) {
        this.pageviews = data().deepCopy(fields()[1].schema(), other.pageviews);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'userid' field.
      * @return The value.
      */
    public java.lang.String getUserid() {
      return userid;
    }


    /**
      * Sets the value of the 'userid' field.
      * @param value The value of 'userid'.
      * @return This builder.
      */
    public io.carles.kafkastream.NullableUserPageViewsProduct.Builder setUserid(java.lang.String value) {
      validate(fields()[0], value);
      this.userid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userid' field has been set.
      * @return True if the 'userid' field has been set, false otherwise.
      */
    public boolean hasUserid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userid' field.
      * @return This builder.
      */
    public io.carles.kafkastream.NullableUserPageViewsProduct.Builder clearUserid() {
      userid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'pageviews' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getPageviews() {
      return pageviews;
    }


    /**
      * Sets the value of the 'pageviews' field.
      * @param value The value of 'pageviews'.
      * @return This builder.
      */
    public io.carles.kafkastream.NullableUserPageViewsProduct.Builder setPageviews(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[1], value);
      this.pageviews = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'pageviews' field has been set.
      * @return True if the 'pageviews' field has been set, false otherwise.
      */
    public boolean hasPageviews() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'pageviews' field.
      * @return This builder.
      */
    public io.carles.kafkastream.NullableUserPageViewsProduct.Builder clearPageviews() {
      pageviews = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public NullableUserPageViewsProduct build() {
      try {
        NullableUserPageViewsProduct record = new NullableUserPageViewsProduct();
        record.userid = fieldSetFlags()[0] ? this.userid : (java.lang.String) defaultValue(fields()[0]);
        record.pageviews = fieldSetFlags()[1] ? this.pageviews : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<NullableUserPageViewsProduct>
    WRITER$ = (org.apache.avro.io.DatumWriter<NullableUserPageViewsProduct>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<NullableUserPageViewsProduct>
    READER$ = (org.apache.avro.io.DatumReader<NullableUserPageViewsProduct>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.userid == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.userid);
    }

    if (this.pageviews == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.pageviews.size();
      out.writeMapStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.String> e0: this.pageviews.entrySet()) {
        actualSize0++;
        out.startItem();
        out.writeString(e0.getKey());
        java.lang.String v0 = e0.getValue();
        out.writeString(v0);
      }
      out.writeMapEnd();
      if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.userid = null;
      } else {
        this.userid = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.pageviews = null;
      } else {
        long size0 = in.readMapStart();
        java.util.Map<java.lang.String,java.lang.String> m0 = this.pageviews; // Need fresh name due to limitation of macro system
        if (m0 == null) {
          m0 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size0);
          this.pageviews = m0;
        } else m0.clear();
        for ( ; 0 < size0; size0 = in.mapNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.String k0 = null;
            k0 = in.readString();
            java.lang.String v0 = null;
            v0 = in.readString();
            m0.put(k0, v0);
          }
        }
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.userid = null;
          } else {
            this.userid = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.pageviews = null;
          } else {
            long size0 = in.readMapStart();
            java.util.Map<java.lang.String,java.lang.String> m0 = this.pageviews; // Need fresh name due to limitation of macro system
            if (m0 == null) {
              m0 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size0);
              this.pageviews = m0;
            } else m0.clear();
            for ( ; 0 < size0; size0 = in.mapNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.String k0 = null;
                k0 = in.readString();
                java.lang.String v0 = null;
                v0 = in.readString();
                m0.put(k0, v0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










